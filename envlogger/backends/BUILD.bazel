# Copyright 2025 DeepMind Technologies Limited..
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Backends.
load("@rules_python//python:defs.bzl", "py_library", "py_test")

package(default_visibility = ["//visibility:public"])

py_library(
    name = "backend_type",
    srcs = ["backend_type.py"],
)

py_library(
    name = "schedulers",
    srcs = ["schedulers.py"],
    deps = [
        "//envlogger:step_data",
    ],
)

py_test(
    name = "schedulers_test",
    srcs = ["schedulers_test.py"],
    deps = [
        ":schedulers",
        "//envlogger:step_data",
    ],
)

py_library(
    name = "backend_reader",
    srcs = ["backend_reader.py"],
    data = ["//envlogger/backends/python:episode_info.so"],
    deps = [
        "//envlogger:step_data",
        "//envlogger/converters:codec",
    ],
)

py_library(
    name = "backend_writer",
    srcs = ["backend_writer.py"],
    deps = [
        "//envlogger:step_data",
    ],
)

py_library(
    name = "in_memory_backend",
    srcs = ["in_memory_backend.py"],
    data = ["//envlogger/backends/python:episode_info.so"],
    deps = [
        ":backend_reader",
        ":backend_writer",
        "//envlogger:step_data",
    ],
)

py_test(
    name = "in_memory_backend_test",
    srcs = ["in_memory_backend_test.py"],
    deps = [
        ":backend_writer",
        ":in_memory_backend",
        ":schedulers",
        "//envlogger:step_data",
        "//envlogger/testing:catch_env",
    ],
)

py_library(
    name = "riegeli_backend_reader",
    srcs = ["riegeli_backend_reader.py"],
    data = [
        "//envlogger/backends/python:episode_info.so",
        "//envlogger/backends/python:riegeli_dataset_reader.so",
    ],
    deps = [
        ":backend_reader",
        "//envlogger:step_data",
        "//envlogger/converters:codec",
        "//envlogger/proto:storage_py_pb2",
    ],
)

py_library(
    name = "riegeli_backend_writer",
    srcs = ["riegeli_backend_writer.py"],
    data = [
        "//envlogger/backends/python:riegeli_dataset_writer.so",
    ],
    deps = [
        ":backend_writer",
        ":schedulers",
        "//envlogger:step_data",
        "//envlogger/converters:codec",
    ],
)

py_test(
    name = "riegeli_backend_writer_test",
    srcs = ["riegeli_backend_writer_test.py"],
    deps = [
        ":backend_writer",
        ":riegeli_backend_reader",
        ":riegeli_backend_writer",
        ":schedulers",
        "//envlogger:step_data",
        "//envlogger/testing:catch_env",
    ],
)

py_library(
    name = "rlds_utils",
    srcs = ["rlds_utils.py"],
    deps = [
        "//envlogger:step_data",
    ],
)

py_library(
    name = "tfds_backend_writer",
    srcs = ["tfds_backend_writer.py"],
    deps = [
        ":backend_writer",
        ":rlds_utils",
        "//envlogger:step_data",
    ],
)

py_library(
    name = "tfds_backend_testlib",
    srcs = ["tfds_backend_testlib.py"],
    deps = [
        ":backend_writer",
        ":schedulers",
        ":tfds_backend_writer",
        "//envlogger:step_data",
        "//envlogger/testing:catch_env",
    ],
)

py_test(
    name = "rlds_utils_test",
    srcs = ["rlds_utils_test.py"],
    deps = [
        ":rlds_utils",
        ":tfds_backend_testlib",
        "//envlogger:step_data",
    ],
)

py_test(
    name = "tfds_backend_writer_test",
    srcs = ["tfds_backend_writer_test.py"],
    deps = [
        ":backend_writer",
        ":rlds_utils",
        ":tfds_backend_testlib",
        ":tfds_backend_writer",
        "//envlogger:step_data",
    ],
)
